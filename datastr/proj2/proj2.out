Script started on Sun 02 Mar 2014 05:31:59 PM EST
[primiano@erdos proj2]$ cat VectorBag.h
#ifndef VECTORBAG_H
#define VECTORBAG_H

#include <vector>
#include <iostream>
#include "BagInterface.h"

template <class ItemType> 
class VectorBag{

    std::vector<ItemType> data;

public:
    //0 parameter constructor
    VectorBag<ItemType>(){}
    //1 parameter constructor given a vector<ItemType> initilize data to myData
    VectorBag<ItemType> (const std::vector<ItemType>& myData) : data(myData){}
    //1 parameter constructor given a bag initilize data to myBag.data
    VectorBag<ItemType> (const VectorBag<ItemType>& myBag) : data(myBag.data){}
    std::vector<ItemType> toVector() const;
    bool add(ItemType const &item);
    bool remove(const ItemType &item);
    bool contains(const ItemType &item) const;
    bool isEmpty() const;
    int getFrequencyOf(const ItemType &item) const;
    int getCurrentSize() const;
    void clear();
};

#include "VectorBag.cpp"

#endif
[primiano@erdos proj2]$ cat VectorBag.cpp
#include "VectorBag.h"

/**
 * <p>Creates a new bag that combines the contents of this bag
 * and a second given bag without affecting the origin two bag.</p> 
 *
 * <p>Note that we can't call the operation "<code>union</code>",
 * since"<code>union</code>" is a reserve word.</p>
 *
 * @param first - A given bag
 * @param second - Another given bag
 * @return A bag that is the union of the two bags
 */
template <class ItemType>
VectorBag<ItemType> operator+(const VectorBag<ItemType>& first, 
			      const VectorBag<ItemType>& second)
{
    std::vector<ItemType> firstVector = first.toVector();
    std::vector<ItemType> secondVector = second.toVector();
    for (int i = 0; i < secondVector.size(); i++) {
	firstVector.push_back(secondVector[i]);
    } 
    return firstVector;
}  

/**
 * <p>Creates a new bag of objects that would be left in the bag 
 * after removing thoes that also occur in a second given bag 
 * without affecting the origional two bags.
 *
 * @param first - A given bag
 * @param second - Another given bag
 * @return A bag that is the difference of the two bags
 */
template <class ItemType>
VectorBag<ItemType> operator-(const VectorBag<ItemType>& first, 
			      const VectorBag<ItemType>& second)
{
    VectorBag<ItemType> firstVector = first.toVector();
    std::vector<ItemType> secondVector = second.toVector();
    VectorBag<ItemType> diff(first);
    for (int i = 0; i < secondVector.size(); i++){
	diff.remove(secondVector[i]);
    }
    return diff;
}

/**
 * Creates a new bag that contains thoes objects that occur in
 * this bag and a second given bag without affecting the origional 
 * two bags.
 *
 * @param first - A given bag
 * @param second - Another given bag
 * @return A bag that is the union of the two bags
 */
template <class ItemType>
VectorBag<ItemType> operator*(const VectorBag<ItemType>& first, 
			      const VectorBag<ItemType>& second)
{
    return first - (first - second);
}

/**
 * Sees whether this bag is empty.
 *
 * @return True if the bag is empty, or false if not.
 */
template <class ItemType>
bool VectorBag<ItemType>::isEmpty() const
{
    return data.size() == 0;
}

/**
 * Adds a new entry to this bag.
 *
 * @post If successful, item is stored in the bag and
 * the count of items in the bag has increased by 1.
 *
 * @param item The object to be added as a new entry.
 * @return True if addition was successful, or false if not.
 */
template <class ItemType>
bool VectorBag<ItemType>::add(ItemType const &item)
{
    data.push_back(item);
    return true;
}

/**
 * Gets the current number of entries in this bag.
 *
 * @return The integer number of entries currently in the bag.
 */
template<class ItemType>
int VectorBag<ItemType>::getCurrentSize() const {
    return data.size(); 
}

/**
 * Empties and then fills a given vector with all entries
 * that are in this bag.
 *
 * @return A vector containing all the entries in the bag.
 */
template<class ItemType>
std::vector<ItemType> VectorBag<ItemType>::toVector() const
{
    return data; 
}

/**
 * Counts the number of entries in this bag.
 *
 * @param item The entry to be counted.
 * @return The number of times item appears in the bag.
 */
template<class ItemType>
int VectorBag<ItemType>::getFrequencyOf(const ItemType &item) const
{
    int count = 0;
    for (int i = 0; i < data.size(); i ++) {
	if (data[i] == item)
	    count ++;
    }
    return count;
}

/**
 * Tests whether this bag contains a given entry.
 *
 * @param item The entry to locate.
 * @return True if bag contains item, or false otherwise.
 */
template<class ItemType>
bool VectorBag<ItemType>::contains(const ItemType &item) const
{
    for (int i = 0; i < data.size(); i ++){
	if (data[i] == item)
	    return true;
    }
    return false;
}

/**
 * Removes all entries from this bag.
 *
 * @post Bag contains no items, and the count of items
 * is 0.
 */
template<class ItemType>
void VectorBag<ItemType>::clear() {
    data.clear();
}

/**
 * Removes one occurrence of a given entry from this bag, if 
 * possible.
 *
 * @post If successful, item has been removed from the bag
 * and the count of items in the bag has decreased by 1.
 * @param item The entry to be removed.
 * @return True if removal was successful, or false if not.
 */
template<class ItemType>
bool VectorBag<ItemType>::remove(const ItemType &item)
{
    for (int i = 0; i < data.size(); i++) {
	if (data[i] == item){
	    data[i] = data[data.size() - 1]; 
	    data.pop_back();
	    return true;
	}
    }
    return false;
}

[primiano@erdos proj2]$ make clean
[primiano@erdos proj2]$ make
g++ -Wall -o proj2 proj2.cpp
[primiano@erdos proj2]$ proj2
Testing the Vector-Based Bag:
The initial bag is empty.
isEmpty: returns 1; should be 1 (true)
The bag contains 0 items:


Adding 6 items to the bag: 
The bag contains 6 items:
five four one one three two 

isEmpty: returns 0; should be 0 (false)
getCurrentSize: returns 6; should be 6
Try to add another entry: add("extra") returns 1
contains("three"): returns 1; should be 1 (true)
contains("ten"): returns 0; should be 0 (false)
getFrequencyOf("one"): returns 2 should be 2
remove("one"): returns 1; should be 1 (true)
getFrequencyOf("one"): returns 1 should be 1
remove("one"): returns 1; should be 1 (true)
remove("one"): returns 0; should be 0 (false)

The bag contains 5 items:
extra five four three two 

After clearing the bag, isEmpty: returns 1; should be 1 (true)

Let's test the new bag operations.

Adding 9 items to first bag: 
First bag: The bag contains 9 items:
2 4 6 6 8 10 12 15 15 

Adding 8 items to second bag: 
Second bag: The bag contains 8 items:
3 6 9 12 12 15 15 18 

firstBag union secondBag: 
The bag contains 17 items:
2 3 4 6 6 6 8 9 10 12 12 12 15 15 15 15 18 

firstBag intersect secondBag: 
The bag contains 4 items:
6 12 15 15 

firstBag minus secondBag: 
The bag contains 5 items:
2 4 6 8 10 

secondBag minus firstBag: 
The bag contains 4 items:
3 9 12 18 

All done!
[primiano@erdos proj2]$ exit
exit

Script done on Sun 02 Mar 2014 05:32:46 PM EST
